Trees-3

Problem1 (https://leetcode.com/problems/path-sum-ii/)

solution 1:

#Backtracking
TC O(n) SC O(h)

class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        if root == None:
            return []
        
        self.result = []
        self.dfs(root , 0 , [] , targetSum )
        return self.result

    def dfs(self, root: Optional[TreeNode] , currSum : int , path : List[int] , targetSum: int ) -> None:
        #base
        if root == None:
            return


        #logic
        #action
        path.append(root.val)
        currSum = currSum + root.val
        if root.left == None and root.right == None:
            if currSum == targetSum :
                self.result.append([i for i in path])
        
        #recurse
        self.dfs(root.left, currSum , path, targetSum)
        self.dfs(root.right, currSum , path, targetSum)

        #backtrack
        path.pop()



solution 2:

#maintaining list of n elements at every height
#TC O(nh) SC O(nh)

class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        if root == None:
            return []
        self.result = []
        self.dfs(root, 0 , [], targetSum)
        return self.result

    def dfs(self, root: Optional[TreeNode], currSum: int, path: List[int], targetSum: int) -> None:
        #base case
        if root == None:
            return

        #main logic
        path.append(root.val)
        currSum = currSum + root.val
        if root.left == None and root.right == None:
            if currSum == targetSum:
                self.result.append(path)
            return
        #[i for i in path] creates separate list otherwise if path is passed in recursive call then it is actually passed by reference
        self.dfs(root.left, currSum, [i for i in path], targetSum)
        self.dfs(root.right, currSum, [i for i in path], targetSum)








Problem2 (https://leetcode.com/problems/symmetric-tree/)

solution 1:

# using dfs (stack)
#TC O(n) and SC O(h)

class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if root == None:
            return True
        
        self.isSymmetric = True
        self.dfs(root.left,root.right)
        return self.isSymmetric
    
    def dfs(self, left : Optional[TreeNode] , right : Optional[TreeNode]) -> None:
        if left == None and right == None:
            return
        
        if left == None or right == None: 
            self.isSymmetric = False
            return

        if left.val != right.val:
            self.isSymmetric = False
            return

        self.dfs(left.left , right.right)
        self.dfs(left.right , right.left)


solution 2:

# using bfs (queue)
#TC O(n) and SC O(h)

from queue import Queue
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if root == None:
            return True
        
        q = Queue()
        q.put(root.left)
        q.put(root.right)
        while q.qsize() > 0:
            left = q.get()
            right = q.get()
            if left == None and right == None:
                continue
            
            if left == None or right == None:
                return False

            if left.val != right.val:
                return False
            
            q.put(left.left)
            q.put(right.right)
            q.put(left.right)
            q.put(right.left)

        return True

